type: edu
files:
- name: src/contacts/Main.java
  visible: true
  text: |
    package contacts;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/ContactsTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.List;\nimport\
    \ java.util.function.Function;\n\n\nclass TestClue {\n\n    Function<String, CheckResult>\
    \ callback;\n\n    TestClue(Function<String, CheckResult> callback) {\n      \
    \  this.callback = callback;\n    }\n}\n\n\npublic class ContactsTest extends\
    \ StageTest<TestClue> {\n\n    private CheckResult splitActionsFeedback(int actualSize,\
    \ int needSize) {\n        if (actualSize < needSize) {\n            return CheckResult.wrong(String.format(\"\
    This test should contain at least %d actions, but you have only %d. \" +\n   \
    \                         \"You should separate your actions with an empty line.\"\
    ,\n                    needSize,\n                    actualSize));\n        }\
    \ else {\n            return null;\n        }\n    }\n    \n    @Override\n  \
    \  public List<TestCase<TestClue>> generate() {\n        return List.of (\n  \
    \          new TestCase<TestClue>()\n                .setInput(\"exit\")\n   \
    \             .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    enter action\")) {\n                        return new CheckResult(false,\n  \
    \                          \"No \\\"Enter action\\\" substring found in the output\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"count\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    output\
    \ = output.strip().toLowerCase();\n                    if (!output.contains(\"\
    0 records\")) {\n                        return new CheckResult(false,\n     \
    \                       \"No \\\"0 records\\\" substring found in the output.\
    \ \" +\n                                    \"If you already have the database,\
    \ try to delete it.\");\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"count\\n\"\
    \ +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    output = output.strip().toLowerCase();\n         \
    \           if (output.contains(\"0 records\")) {\n                        return\
    \ new CheckResult(false,\n                            \"Can't add the person\"\
    );\n                    }\n                    return CheckResult.correct();\n\
    \                })),\n\n            new TestCase<TestClue>()\n              \
    \  .setInput(\n                    \"add\\n\" +\n                        \"person\\\
    n\" +\n                        \"John\\n\" +\n                        \"Smith\\\
    n\" +\n                        \"\\n\" +\n                        \"\\n\" +\n\
    \                        \"123 456 789\\n\" +\n                    \"list\\n\"\
    \ +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n     \
    \               \"exit\")\n                .setAttach(new TestClue(output -> {\n\
    \                    String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\\
    s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 3);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ [no data]\")\n                                && infoBlock.contains(\"Number:\
    \ 123 456 789\")\n                                && infoBlock.contains(\"Time\
    \ created:\")\n                                && infoBlock.contains(\"Time last\
    \ edit:\")) {\n                            return CheckResult.correct();\n   \
    \                     }\n                    }\n                    return new\
    \ CheckResult(false,\n                            \"Something wrong with printing\
    \ user info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"list\\n\" +\n                   \
    \ \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 3);\n              \
    \      if (feedback != null) return feedback;\n\n                    for (String\
    \ infoBlock : blocks) {\n                        if (infoBlock.contains(\"Organization\
    \ name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St. 1\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Something wrong with printing\
    \ organization info\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"person\\n\" +\n                        \"John\\n\" +\n          \
    \              \"Smith\\n\" +\n                        \"\\n\" +\n           \
    \             \"\\n\" +\n                        \"123 456 789\\n\" +\n      \
    \              \"list\\n\" +\n                    \"1\\n\" +\n               \
    \     \"edit\\n\" +\n                        \"gender\\n\" +\n               \
    \         \"M\\n\" +\n                    \"menu\\n\" +\n                    \"\
    list\\n\" +\n                    \"1\\n\" +\n                    \"menu\\n\" +\n\
    \                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Name: John\")\n                                && infoBlock.contains(\"Surname:\
    \ Smith\")\n                                && infoBlock.contains(\"Birth date:\
    \ [no data]\")\n                                && infoBlock.contains(\"Gender:\
    \ M\")\n                                && infoBlock.contains(\"Number: 123 456\
    \ 789\")\n                                && infoBlock.contains(\"Time created:\"\
    )\n                                && infoBlock.contains(\"Time last edit:\"))\
    \ {\n                            return CheckResult.correct();\n             \
    \           }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Editing person is not working\");\n           \
    \     })),\n\n            new TestCase<TestClue>()\n                .setInput(\n\
    \                    \"add\\n\" +\n                        \"organization\\n\"\
    \ +\n                        \"Pizza Shop\\n\" +\n                        \"Wall\
    \ St. 1\\n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n     \
    \               \"list\\n\" +\n                    \"1\\n\" +\n              \
    \      \"edit\\n\" +\n                        \"address\\n\" +\n             \
    \           \"Wall St 2\\n\" +\n                    \"menu\\n\" +\n          \
    \          \"list\\n\" +\n                    \"1\\n\" +\n                   \
    \ \"menu\\n\" +\n                    \"exit\")\n                .setAttach(new\
    \ TestClue(output -> {\n                    String[] blocks = output.strip().split(\"\
    (\\\\s*\\\\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 6);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Organization name: Pizza Shop\")\n                                && infoBlock.contains(\"\
    Address: Wall St 2\")\n                                && infoBlock.contains(\"\
    Number: +0 (123) 456-789-9999\")\n                                && infoBlock.contains(\"\
    Time created:\")\n                                && infoBlock.contains(\"Time\
    \ last edit:\")) {\n                            return CheckResult.correct();\n\
    \                        }\n                    }\n                    return\
    \ new CheckResult(false,\n                            \"Editing organization is\
    \ not working\");\n                })),\n\n            new TestCase<TestClue>()\n\
    \                .setInput(\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"Pizza Shop\\n\" +\n\
    \                        \"Wall St. 1\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"add\\n\" +\n                    \
    \    \"person\\n\" +\n                        \"John\\n\" +\n                \
    \        \"Smith\\n\" +\n                        \"\\n\" +\n                 \
    \       \"\\n\" +\n                        \"123 456 789\\n\" +\n            \
    \        \"add\\n\" +\n                        \"organization\\n\" +\n       \
    \                 \"PizzaNuts\\n\" +\n                        \"Wall St. 6\\n\"\
    \ +\n                        \"+0 (123) 456-789-9999\\n\" +\n                \
    \    \"search\\n\" +\n                        \"pizz\\n\" +\n                \
    \    \"1\\n\" +\n                    \"menu\\n\" +\n                    \"exit\"\
    )\n                .setAttach(new TestClue(output -> {\n                    String[]\
    \ blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\");\n              \
    \      var feedback = splitActionsFeedback(blocks.length, 4);\n              \
    \      if (feedback != null) return feedback;\n    \n                    \n  \
    \                  for (String infoBlock : blocks) {\n                       \
    \ if (infoBlock.contains(\"Pizza Shop\")\n                                && infoBlock.contains(\"\
    PizzaNuts\")\n                                && !infoBlock.contains(\"John\"\
    )) {\n                            return CheckResult.correct();\n            \
    \            }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n            new TestCase<TestClue>()\n                .setInput(\n         \
    \           \"add\\n\" +\n                        \"organization\\n\" +\n    \
    \                    \"Pizza Shop\\n\" +\n                        \"Wall St. 1\\\
    n\" +\n                        \"+0 (123) 456-789-9999\\n\" +\n              \
    \      \"add\\n\" +\n                        \"person\\n\" +\n               \
    \         \"John\\n\" +\n                        \"Smith\\n\" +\n            \
    \            \"\\n\" +\n                        \"\\n\" +\n                  \
    \      \"123 456 789\\n\" +\n                    \"add\\n\" +\n              \
    \          \"organization\\n\" +\n                        \"PizzaNuts\\n\" +\n\
    \                        \"Wall St. 6\\n\" +\n                        \"+0 (123)\
    \ 456-789-9999\\n\" +\n                    \"search\\n\" +\n                 \
    \       \"s\\n\" +\n                    \"1\\n\" +\n                    \"menu\\\
    n\" +\n                    \"exit\")\n                .setAttach(new TestClue(output\
    \ -> {\n                    String[] blocks = output.strip().split(\"(\\\\s*\\\
    \\n\\\\s*){2,}\");\n                    var feedback = splitActionsFeedback(blocks.length,\
    \ 4);\n                    if (feedback != null) return feedback;\n\n        \
    \            for (String infoBlock : blocks) {\n                        if (infoBlock.contains(\"\
    Pizza Shop\")\n                                && infoBlock.contains(\"John Smith\"\
    )\n                                && infoBlock.contains(\"PizzaNuts\")) {\n \
    \                           return CheckResult.correct();\n                  \
    \      }\n                    }\n                    return new CheckResult(false,\n\
    \                            \"Search is not working\");\n                })),\n\
    \n        new TestCase<TestClue>()\n            .setInput(\n                \"\
    add\\n\" +\n                    \"organization\\n\" +\n                    \"\
    Pizza Shop\\n\" +\n                    \"Wall St. 1\\n\" +\n                 \
    \   \"+0 (123) 456-789-9999\\n\" +\n                \"add\\n\" +\n           \
    \         \"person\\n\" +\n                    \"John\\n\" +\n               \
    \     \"Smith\\n\" +\n                    \"\\n\" +\n                    \"\\\
    n\" +\n                    \"123 456 789\\n\" +\n                \"add\\n\" +\n\
    \                    \"organization\\n\" +\n                    \"PizzaNuts\\\
    n\" +\n                    \"Wall St. 6\\n\" +\n                    \"+0 (123)\
    \ 456-781-9999\\n\" +\n                \"search\\n\" +\n                    \"\
    789\\n\" +\n                \"1\\n\" +\n                \"menu\\n\" +\n      \
    \          \"exit\")\n            .setAttach(new TestClue(output -> {\n      \
    \          String[] blocks = output.strip().split(\"(\\\\s*\\\\n\\\\s*){2,}\"\
    );\n                var feedback = splitActionsFeedback(blocks.length, 4);\n \
    \               if (feedback != null) return feedback;\n\n                for\
    \ (String infoBlock : blocks) {\n                    if (infoBlock.contains(\"\
    Pizza Shop\")\n                            && infoBlock.contains(\"John Smith\"\
    )\n                            && !infoBlock.contains(\"PizzaNuts\")) {\n    \
    \                    return CheckResult.correct();\n\n                    } else\
    \ if (infoBlock.contains(\"+0 (123) 456-789-9999\")\n                        \
    \    && infoBlock.contains(\"123 456 789\")\n                            && !infoBlock.contains(\"\
    +0 (123) 456-781-9999\")) {\n                        return CheckResult.correct();\n\
    \                    }\n                }\n                return new CheckResult(false,\n\
    \                        \"Search by phone number is not working\");\n       \
    \     }))\n        );\n    }\n\n    @Override\n    public CheckResult check(String\
    \ reply, TestClue clue) {\n        try {\n            return clue.callback.apply(reply);\n\
    \        }\n        catch (Exception ex) {\n            return new CheckResult(false,\
    \ \"Can't check the answer\");\n        }\n    }\n}\n"
  learner_created: false
- name: src/contacts/App.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.format.DateTimeParseException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class App {
        private final Scanner scanner = new Scanner(System.in);
        private final List<Contact> contacts = new ArrayList<>();


        private void addContact() {
    //        scanner.nextLine();
            System.out.print("Enter the type (person, organization): > ");
            String type = scanner.nextLine();
            if (type.equals("person")) {
                System.out.print("Enter the name: > ");
                String name = scanner.nextLine();
                System.out.print("Enter the surname: > ");
                String surname = scanner.nextLine();
                System.out.print("Enter the birth date: > ");
                LocalDate bod = null;
                try {
                    bod = LocalDate.parse(scanner.nextLine());
                } catch (DateTimeParseException e) {
                    System.out.println("Bad birth date!");
                }
                System.out.print("Enter the gender (M, F): > ");
                char gender = ' ';
                String genderInput = scanner.nextLine();
                if (genderInput.equals("M")) {
                    gender = 'M';
                } else if (genderInput.equals("F")) {
                    gender = 'F';
                } else {
                    System.out.println("Bad gender!");
                }
                System.out.print("Enter the number: > ");
                String phoneNumber = scanner.nextLine();
                contacts.add(new PersonContact(name, surname, phoneNumber, bod, gender));
                if (contacts.get(contacts.size() - 1).hasNumber()) {
                    System.out.println("Wrong number format!");
                }
                System.out.println("The record added");
            } else if (type.equals("organization")) {
                System.out.print("Enter the organization name: > ");
                String organizationName = scanner.nextLine();
                System.out.print("Enter the address: > ");
                String address = scanner.nextLine();
                System.out.print("Enter the number: > ");
                String phoneNumber = scanner.nextLine();
                contacts.add(new OrganizationContact(organizationName, address, phoneNumber));
                if (contacts.get(contacts.size() - 1).hasNumber()) {
                    System.out.println("Wrong number format!");
                }
                System.out.println("The record added");
            }
        }
        private void removeContact() {
            if (contacts.size() == 0) {
                System.out.println("No records to remove!");
                return;
            }
            listContact();
            System.out.print("Select a record: > ");
            int recordNumber = scanner.nextInt();
            if (recordNumber <= 0  || recordNumber > contacts.size()) {
                System.out.println("Wrong index");
                return;
            }
            contacts.remove(recordNumber - 1);
            System.out.println("The record removed!");
        }
        private void editContact() {
            if (contacts.size() == 0) {
                System.out.println("No records to edit!");
                return;
            }
            listContact();
            System.out.print("Select a record: > ");
            int recordNumber = scanner.nextInt();
            if (recordNumber <= 0  || recordNumber > contacts.size()) {
                System.out.println("Wrong index");
                return;
            }
            scanner.nextLine();
            if (contacts.get(recordNumber - 1) instanceof PersonContact) {
                System.out.print("Select a field (name, surname, birth, gender, number): > ");
    //            scanner.nextLine();
                String field = scanner.nextLine();
                if (field.equals("name")) {
                    System.out.print("Enter name: > ");
    //                scanner.nextLine();
                    String name = scanner.nextLine();
                    ((PersonContact) contacts.get(recordNumber - 1)).setName(name);
                    System.out.println("The record updated!");
                } else if (field.equals("surname")) {
                    System.out.print("Enter surname: > ");
    //                scanner.nextLine();
                    String surname = scanner.nextLine();
                    ((PersonContact) contacts.get(recordNumber - 1)).setSurname(surname);
                    System.out.println("The record updated!");
                } else if (field.equals("birth")) {
                    System.out.print("Enter the birth date: > ");
                    LocalDate bod = null;
                    try {
                        bod = LocalDate.parse(scanner.nextLine());
                    } catch (DateTimeParseException e) {
                        System.out.println("Bad birth date!");
                    }
                    ((PersonContact) contacts.get(recordNumber - 1)).setBirthDate(bod);
                    System.out.println("The record updated!");
                } else if (field.equals("gender")) {
                    System.out.print("Enter the gender (M, F): > ");
                    char gender = ' ';
                    String genderInput = scanner.nextLine();
                    if (genderInput.equals("M")) {
                        gender = 'M';
                    } else if (genderInput.equals("F")) {
                        gender = 'F';
                    } else {
                        System.out.println("Bad gender!");
                    }
                    ((PersonContact) contacts.get(recordNumber - 1)).setGender(gender);
                    System.out.println("The record updated!");
                } else if (field.equals("number")) {
                    System.out.print("Enter number: > ");
    //                scanner.nextLine();
                    String phoneNumber = scanner.nextLine();
                    contacts.get(recordNumber - 1).setPhoneNumber(phoneNumber);
                    System.out.println("The record updated!");
                }
            } else if (contacts.get(recordNumber - 1) instanceof OrganizationContact) {
                System.out.print("Select a field (name, address, number): > ");
    //            scanner.nextLine();
                String field = scanner.nextLine();
                if (field.equals("name")) {
                    System.out.print("Enter organization name: > ");
    //                scanner.nextLine();
                    String name = scanner.nextLine();
                    ((OrganizationContact) contacts.get(recordNumber - 1)).setOrganizationName(name);
                    System.out.println("The record updated!");
                } else if (field.equals("address")) {
                    System.out.print("Enter address: > ");
    //                scanner.nextLine();
                    String address = scanner.nextLine();
                    ((OrganizationContact) contacts.get(recordNumber - 1)).setAddress(address);
                    System.out.println("The record updated!");
                } else if (field.equals("number")) {
                    System.out.print("Enter number: > ");
    //                scanner.nextLine();
                    String phoneNumber = scanner.nextLine();
                    contacts.get(recordNumber - 1).setPhoneNumber(phoneNumber);
                    System.out.println("The record updated!");
                }
            }

        }
        private void countContacts() {
            System.out.println("The Phone Book has " + contacts.size() + " records.");
        }
        private void listContact() {
            if (contacts.size() == 0) {
                System.out.println("No records to list!");
                return;
            }
            for (int i = 0; i < contacts.size(); i++) {
                if (contacts.get(i) instanceof PersonContact personContact) {
                    System.out.println((i + 1) + ". " + personContact.getName() + " " + personContact.getSurname());
                } else if (contacts.get(i) instanceof OrganizationContact) {
                    System.out.println((i + 1) + ". " + ((OrganizationContact) contacts.get(i)).getOrganizationName());
                }
            }
        }
        private void infoContact() {
            if (contacts.size() == 0) {
                System.out.println("No records to list!");
                return;
            }
            listContact();
            System.out.print("Select a record: > ");
            int recordNumber = scanner.nextInt();
            if (recordNumber <= 0  || recordNumber > contacts.size()) {
                System.out.println("Wrong index");
                return;
            }
            System.out.println(contacts.get(recordNumber - 1).toString());
            scanner.nextLine();
        }

        public void run() {
            loop: while (true) {
                System.out.print("\nEnter action (add, remove, edit, count, info, exit): > ");
                String command = scanner.nextLine();
                switch (command) {
                    case "add":
                        addContact();
                        break;
                    case "remove":
                        removeContact();
                        break;
                    case "edit":
                        editContact();
                        break;
                    case "count":
                        countContacts();
                        break;
                    case "info":
                        infoContact();
                        break;
                    case "exit":
                        break loop;
                    default:
                        System.out.println("Undefined command");
                }
            }
        }
    }
  learner_created: true
- name: src/contacts/OrganizationContact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public class OrganizationContact extends Contact{
        private String organizationName;
        private String address;

        public OrganizationContact(String organizationName, String address, String phoneNumber) {
            super(phoneNumber);
            this.organizationName = organizationName;
            this.address = address;
        }

        public void setOrganizationName(String organizationName) {
            this.organizationName = organizationName;
            this.lastEditDate = LocalDateTime.now();
        }
        public void setAddress(String address) {
            this.address = address;
            this.lastEditDate = LocalDateTime.now();
        }

        public String getOrganizationName() {
            return organizationName;
        }
        public String getAddress() {
            return address;
        }

        @Override
        public String toString() {
            return "Organization name: " + organizationName + '\n' +
                    "Address: " + address + '\n' +
                    "Number: " + phoneNumber + '\n' +
                    "Time created: " + creationDate + '\n' +
                    "Time last edit: " + lastEditDate + '\n';
        }
    }
  learner_created: true
- name: src/contacts/Contact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDateTime;

    public abstract class Contact {
        protected String phoneNumber;
        protected LocalDateTime creationDate;
        protected LocalDateTime lastEditDate;

        public Contact(String phoneNumber) {
            this.phoneNumber = checkPhoneNumber(phoneNumber) ? phoneNumber : "[no number]";
            this.creationDate = LocalDateTime.now();
            this.lastEditDate = LocalDateTime.now();
        }

        private boolean checkPhoneNumber(String phoneNumber) {
            String regex = "[+]?([(][0-9a-zA-Z]+[)]|[0-9a-zA-Z]+[ -][(][0-9a-zA-Z]{2,}[)]|[0-9a-zA-Z]+)([ -][0-9a-zA-Z]{2,})*";
            return phoneNumber.matches(regex);
        }

        public boolean hasNumber() {
            return phoneNumber == null || phoneNumber.equals("[no number]");
        }

        public void setPhoneNumber(String phoneNumber) {
            this.phoneNumber = checkPhoneNumber(phoneNumber) ? phoneNumber : "[no number]";
            this.lastEditDate = LocalDateTime.now();
        }

        public String getPhoneNumber() {
            return phoneNumber;
        }
    }
  learner_created: true
- name: src/contacts/PersonContact.java
  visible: true
  text: |
    package contacts;

    import java.time.LocalDate;
    import java.time.LocalDateTime;

    public class PersonContact extends Contact{
        private String name;
        private String surname;
        private LocalDate birthDate;
        private char gender;

        public PersonContact(String name, String surname, String phoneNumber, LocalDate dob, char gender) {
            super(phoneNumber);
            this.name = name;
            this.surname = surname;
            this.birthDate = dob;
            this.gender = gender;
        }

        public void setName(String name) {
            this.name = name;
            this.lastEditDate = LocalDateTime.now();
        }
        public void setSurname(String surname) {
            this.surname = surname;
            this.lastEditDate = LocalDateTime.now();
        }
        public void setBirthDate(LocalDate birthDate) {
            this.birthDate = birthDate;
            this.lastEditDate = LocalDateTime.now();
        }
        public void setGender(char gender) {
            this.gender = gender;
            this.lastEditDate = LocalDateTime.now();
        }

        public String getName() {
            return name;
        }
        public String getSurname() {
            return surname;
        }
        public LocalDate getBirthDate() {
            return birthDate;
        }
        public char getGender() {
            return gender;
        }

        @Override
        public String toString() {
            return "Name: " + name + '\n' +
                    "Surname: " + surname + '\n' +
                    "Birth date: " + (birthDate == null ? "[no data]" : birthDate)  + '\n' +
                    "Gender: " + (gender == ' ' ? "[no data]" : gender) + '\n' +
                    "Number: " + phoneNumber + '\n' +
                    "Time created: " + creationDate + '\n' +
                    "Time last edit: " + lastEditDate + '\n';
        }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5327#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Wed, 05 Apr 2023 09:47:52 UTC"
record: -1
